{"version":3,"sources":["component/chat/messages.component.js","component/chat/constants.js","component/chat/compose.component.js","component/chat/index.js","App.js","reportWebVitals.js","index.js"],"names":["Messages","messages","map","text","user","_id","API","Compose","useState","value","setValue","className","onSubmit","event","preventDefault","fetch","method","headers","body","JSON","stringify","then","catch","error","console","placeholder","onChange","target","type","socket","io","log","Chat","setMessages","loadMessages","response","json","useEffect","on","newMessage","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQASeA,MATf,YAAiC,IAAbC,EAAY,EAAZA,SAClB,OACE,6BACGA,EAASC,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAMC,EAAf,EAAeA,IAAf,OACZ,uCAAkBD,EAAlB,aAA2BD,IAAlBE,SCHJC,EAAM,uCC2CJC,MAxCf,WAAoB,IAAD,EACSC,mBAAS,IADlB,mBACVC,EADU,KACHC,EADG,KAGjB,OACE,uBACEC,UAAU,OACVC,SAAU,SAACC,GACTA,EAAMC,iBAEQ,KAAVL,GACFM,MAAM,GAAD,OAAIT,EAAJ,oBAA2B,CAC9BU,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBhB,KAAM,QACND,KAAMM,MAGPY,MAAK,WACJX,EAAS,OAEVY,OAAM,SAACC,GAAD,OAAWC,QAAQD,MAAMA,OAnBxC,UAuBE,uBACEZ,UAAU,QACVc,YAAY,0BACZhB,MAAOA,EACPiB,SAAU,SAACb,GAAD,OAAWH,EAASG,EAAMc,OAAOlB,UAE7C,wBAAQmB,KAAK,SAASjB,UAAU,QAAhC,wBC7BAkB,E,MAASC,GAAGxB,GAClBkB,QAAQO,IAAI,UAoCGC,MA1Bf,WAAiB,IAAD,EACkBxB,mBAAS,IAD3B,mBACPP,EADO,KACGgC,EADH,KAGd,SAASC,IAVFnB,MAAM,GAAD,OAAIT,EAAJ,oBAA2B,CACrCU,OAAQ,QAEPK,MAAK,SAACc,GAAD,OAAcA,EAASC,UAC5Bd,OAAM,SAACC,GAAD,OAAWC,QAAQD,MAAMA,MAQ7BF,MAAK,YAAmB,IAAhBpB,EAAe,EAAfA,SACPgC,EAAYhC,MAEbqB,OAAM,SAACC,GAAD,OAAWC,QAAQD,MAAMA,MAUpC,OAPAc,qBAAU,WACRH,IACAL,EAAOS,GAAG,cAAc,SAACC,GACvBN,GAAY,SAAChC,GAAD,4BAAkBA,GAAlB,CAA4BsC,YAEzC,IAGD,sBAAK5B,UAAU,WAAf,UACE,cAAC,EAAD,CAAUV,SAAUA,IACpB,cAAC,EAAD,QCxBSuC,MAZf,WACE,OACE,qBAAK7B,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACG,IADH,OAGE,cAAC,EAAD,UCEO8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.06502101.chunk.js","sourcesContent":["function Messages({ messages }) {\r\n  return (\r\n    <ul>\r\n      {messages.map(({ text, user, _id }) => (\r\n        <li key={_id}>{`${user}: ${text}`}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\nexport default Messages;\r\n","// export const API = 'http://localhost:8000'\r\nexport const API = \"https://make-it-chat-1.herokuapp.com\";\r\n","import { useState } from \"react\";\r\n\r\nimport { API } from \"./constants\";\r\n\r\nfunction Compose() {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  return (\r\n    <form\r\n      className=\"form\"\r\n      onSubmit={(event) => {\r\n        event.preventDefault();\r\n\r\n        if (value !== \"\") {\r\n          fetch(`${API}/channel/general`, {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n              user: \"kelly\",\r\n              text: value,\r\n            }),\r\n          })\r\n            .then(() => {\r\n              setValue(\"\");\r\n            })\r\n            .catch((error) => console.error(error));\r\n        }\r\n      }}\r\n    >\r\n      <input\r\n        className=\"input\"\r\n        placeholder=\"Escribe tu mensaje aqui\"\r\n        value={value}\r\n        onChange={(event) => setValue(event.target.value)}\r\n      />\r\n      <button type=\"submit\" className=\"boton\">\r\n        Enviar\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Compose;\r\n","import { useEffect, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\n\r\nimport Messages from \"./messages.component\";\r\nimport Compose from \"./compose.component\";\r\n\r\nimport { API } from \"./constants\";\r\n\r\nconst socket = io(API);\r\nconsole.log(\"socket\");\r\n\r\nfunction getMessages() {\r\n  return fetch(`${API}/channel/general`, {\r\n    method: \"GET\",\r\n  })\r\n    .then((response) => response.json())\r\n    .catch((error) => console.error(error));\r\n}\r\n\r\nfunction Chat() {\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  function loadMessages() {\r\n    getMessages()\r\n      .then(({ messages }) => {\r\n        setMessages(messages);\r\n      })\r\n      .catch((error) => console.error(error));\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadMessages();\r\n    socket.on(\"newMessage\", (newMessage) => {\r\n      setMessages((messages) => [...messages, newMessage]);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"mensajes\">\r\n      <Messages messages={messages} />\r\n      <Compose />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import \"./App.css\";\r\n\r\nimport Chat from \"./component/chat\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        {\" \"}\r\n        Chat\r\n        <Chat />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}